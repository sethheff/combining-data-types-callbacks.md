// Section 1: Programming Fundamentals
// Create a file called programming_fundamentals.js inside your homework folder for today.
// Copy the questions that you are answering into your file (and comment it out) and write the answer below the question.
// Common programming principles
// As you are starting out, there may be things you are really worried about and other big gotchas that you aren't yet aware that are gotchas!

// Write a ~1 sentence summary for each one

// DRY: 
// Answer: "Dont Repeat Yourself". The most key principle behind code is to make sure it is easy to understand and by using loops, functions, classes and ID's you can avoid repeating yourself and making your code shorter, and easier to read. 

// KISS:
// Answer: "Keep it simple stupid". Another key component of good code is keeping things simple and concise. Overly complicated code is hard to understand and therefore hard to manipulate, fix, and collaborate on.

// Avoid creating a YAGNI:
// Answer: 'You aren't Going to Need it". This principle refers to the idea that if you dont need the functionality(yet) then don't incorporate it. This again ties back to the principles DRY and KISS.

// Do the simplest thing that could possibly work:
// Answer: This idea further helps a programmer to remember the KISS, DRY and YAGNI pricniples. Simplicity is key, simplicity is vital. Stay simple. 

// Don't make me think:
// Answer: An idea coined by Steve Krug in the book with the same title. The idea is that code should be understood with a minimum of effort required. If it takes alot of effortfot understand, it's bad code.  

// Write code for the maintainer:
// Answer: WRite code for the future you who will know as much about your code as a stranger. Make it easy to understand.

// Single responsibility principle:
// Answer: A term that was introduced by Robert C. Martin that says that every module, class or function in a computer program should have responsibility over a specicific funcationality.

// Avoid premature optimization:
// Answer:  The idea that 'Donâ€™t even think about optimization unless your code is working, but slower than you want'. Wait until your code is completely complete before optimization.

// Separation of concerns
// Answer: Different areas of functionality should be managed by distinct and minimally overlapping modules of code. Ties back to the single responsibility principle. Keep specicific funcationality managed by specific code.



// Which ones surprise you (if any)? Premature Optimization. I understand wanting to get your code perfect before improving, but never really conceptualized that idea until now.

// Which one is currently giving you the most struggle? None.


// const f = l => {
//     this is making a function f that takes in the param l
//     let es = 0, p = 0, c = 1, n = 0
//     setting a bunch of variables to values
//     while (c <= l) {
//     loop while c is less than or equal to l
//       n = c + p;
//     set n equal to c + p
//       [c, p] = [n, c]
//     set index c to equal n and p to equal c
//       es += (c % 2 === 0) ? c : 0
//      if c % 2 === 0 then es += c else es += 0
//     }
//     return es
//   }
//   console.log(f(55))

// const f2 = (limit) => {
    // this is making a function f2 that takes in the paramater limit
//     let evenSum = 0;
    // set evenSum equal to 0
//     let previous = 0;
    // set previous equal to 0
//     let current = 1;
    // set current equal to 1
//     while (current <= limit) {
    // loop while current is less than or equal to limit value
//       let next = current + previous;
    // set next equal to current value + previous value
//       previous = current;
    // set previous value equal to current value
//       current = next;
    // set current value equal to next value
//       if (current % 2 === 0) {
    // check if current value is even
//         evenSum += current;
    // if the current value is even add to sum
//       }
//     }
//     return evenSum;
//   }
  
//   console.log(f2(55))

// In keeping with one of our programming principals 
// (write code for the maintainer): What would have been 
// a more semantic name for this function (hint: this is a 
//  problem we had for either lab or hw and is considered 
// a classic ) - are there any other variable names or 
// things that would make this code easier to read and understand?

// I think if they used a for(var i = 1; i <= limit; i++) this
// would be a lot easier to read because then you wouldn't need 
// the previous, current, and next because they make the loop
// a lot less clear in what it is accomplishing which is getting
// the sum of all the even numbers up to the limit parameter.

// If you started a new job and your project was to expand
// the functionality of this function by allowing a second
// argument and then based on that second argument,
// returning the sum of even or odd numbers, which code
// would you rather start working with f or f2?

// I think f2 is better. Code f it is makes it more difficult
// to tell what is happening. I don't think I could have
// explained it until I saw the code for f2.  All you would need to
// do to f2 is an else statement since you are already checking for even
// numbers and the only other case is odd numbers.

// Finally, the 'shorter' code style doesn't use semi-colons,
// except for the fourth line. Remove this semi-colon!
// Run the code, is this semi-colon necessary?

// the semi colon is necessary. I'm not sure why but the error is an 
// invalid left-hand side in assignment so I think you can't add
// things before an assignment unless you have a semi colon