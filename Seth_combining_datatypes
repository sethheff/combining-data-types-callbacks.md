var crayonBox = {
    crayons: ["blue","yellow","purple"],
}

console.log(crayonBox.crayons[1]);

//Create an object bottle that has a property that is an 
// object: cap. cap can have properties like material: 
// 'metal' or 'plastic', color: blue or white etc. 
// Log one of the properties of that inner object.

let bottle = {
    cap:{
        material: "plastic",
    }
}

console.log(bottle.cap.material);

// Create an array called receipt that has at least one 
// object in it. The inner objects should be items that 
// have a name and a price. Log one of the properties 
// of that inner object.

let receipt = [
    {
        name: "food",
        price: 5,
    },
    {
        name: "drink",
        price: 10,
    },
    {
        name:"blanket",
        price:20,
    }
]

console.log(receipt[1].price);

// Create an array called apartmentBuilding that has
//  an array as one of its elements, the inner array 
//  should be the names of the tenants. Log one of
//   the elements of the inner array.

let apartmentBuilding = [
    ["amal","taylor","mateen"]
] 
console.log(apartmentBuilding[0][1]);

// Create a function knit that returns an object that 
// has the following kinds of properties item: 
// scarf, size : 6ft etc. Log a value of that 
// object (hint: call the function and then call a
// property on the return value).
const knit = () => {
    let toRet = {
        isScarf:true,
        size: "6ft",
    }
    return toRet;
}

console.log(knit().isScarf)
 
// Create a function crayonSelector that returns an
//  object that has an array (you can reuse your crayonBox 
// object). Log one of the elements of that array.
const crayonSelector = () => {
    var crayonBox = {
        crayons: ["blue","yellow","purple"],
    }
    return crayonBox;
}

console.log(crayonSelector().crayons[1])

// Create a function powerButton that returns a 
// function called options - options should 
// console.log a simple message like select a 
// song. Call that inner function
const powerButton = (callback) => {
    return callback()
}

const options = () =>{
    console.log("select a song")
}

powerButton(options);

// / Model a Vending Machine Model a vending machine

// a vending machine is an object
// it has an array of snacks (make 3 snacks)
// snacks are objects that have a name and a price
// a vending machine has a function vend that allows user to enter the array position (a number) of the snack and then that snack will be returned
// Be able to call vendingMachine.vend() with a valid integer to return a snack


const vendingMachine = {
  snacks: [
    { name: 'snickers', price: 2 },
    { name: 'skittles', price: 3 },
    { name: 'milkyway', price: 4 },
  ],
  vend: (arrPosition) => {
    return vendingMachine.snacks[arrPosition].name;
  },
};
vendingMachine.vend(2);



// CALLBACKS

// Make a function add that takes two arguments (numbers) and sums them together
const add = (num1, num2) => {
    return num1 + num2
  }
  console.log(add(1,2))
  
  
  // Make a function subtract that takes two arguments (numbers) and subtracts them
  const sub = (num1, num2) => {
    return num1 - num2
  }
  console.log(sub(1,2))
  
  // Make a function multiply that takes two arguments and multiplies them
  const mult = (num1, num2) => {
    return num1 * num2
  }
  console.log(mult(2,5))
  
  
  // Make a function divide that takes two arguments and divides them
  const divide = (num1, num2) => {
    return num1 / num2
  }
  console.log(divide(2,5))
  
  
  // Make a function calculate that takes three arguments. Assume the two arguments are a number ie num1, num2 and a function called operates (a callback).
  // Make it so that when calculate is invoked, the callback "operates" on the numbers and returns the value.
  // Call calculate 4 times, each time using one of the operation functions you wrote
  
  let calculate = (operates, num1, num2) => {
    return operates(num1, num2)
  }
  let operates = (num1, num2) => {
    return num1 + num2
  }
  
  
  calculate(operates, 4, 5)
  calculate(divide, 4, 5)
  calculate(mult, 4, 5)
  calculate(add, 4, 5)
  calculate(sub, 4, 5)

// fixed code 

// Function definition placement
// Clean up this code, so that it works and has function definitions in the correct place

const bar = () => {
    console.log('bar here');
}
bar()

const foo = () => {
    console.log('food here');
}
foo()


// Error reading
// What is meant by the error(s) this produces?

// foo();

// const foo ()=>{
//     console.log('hi');
// }

// This code ^ is providing an error because we need to have the function called AFTER the function is written. It needs to be hoisted. We also need to add a = after foo